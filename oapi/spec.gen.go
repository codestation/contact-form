// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xXTW/jNhD9KwTbW13LSZptoVOzm35k0UORbU9BENDU2GJCcRh+OOsG+u/FkJJt2bK3",
	"xS725miG7z2+GQ6ZVy6xsWjABM/LV26FEw0EcOmvFbg5eqCfFXjplA0KDS/5r1osWUAGRsw1sC6POfAW",
	"jYcpn3BFec8R3JpPuBEN8HKDN+Fe1tAIAoaPorEaeBlchAkPa0uZc0QNwvC2bSe8h02a/jbw0YIMUP3i",
	"HDr6JNEEMIF+Cmu1koJkFo+etL7ucH3rYMFL/k2x3XSRo77IaIlvuNcrw+KGkwGlMZQyOgfVlFN+B0EM",
	"79AEIcMtPEfwSZF1aMEFldVLYYOsxUO/pUNr/6qBdVkbPxkuWKiBLdA15O3GMz67uPqtevt8/mb5nm/M",
	"88Eps+TtJBVXmPURlhzswWWWPsS/kg2wGyOnY+jQCKXHsVOIiapy4P1JhkeszbRC+Ln7NJXYjJEtlPPh",
	"ITfSGGOKM4qfpHuPtRmD1+IkOoU/DX6NMIbdgPdieQS5C57E/R20xgm7YS8YdcW0egI6fU8GX1iDDpiY",
	"YwxsjdExD26lJPjRitkazREdKcRMbObgTor57oxdXl6ys/ML9sPlmx/HaHycP4IM40Rd8CTHjXmOKk2O",
	"Pew0DSgGFS/vdpuib8et3feb1ZjltJPt+dwev+EB9UGE6I8oT7FeuMtnfCgcn0Y1H+jYzK4hewVBKA3V",
	"A/TxQxV9TjeKdhJGS64xj8Mjfd1F+00lzOn/buIspUsZXZ69e5BYwUlzKeFTYvaaoFc2JDmsPq1TZoGH",
	"/F1XpPnKrv68Yd+za5SxAROyOwt0SdF+ImlTIVV+JLQC5zPB2XQ2nZENaMEIq3jJL6az6TmfcCtCnWpf",
	"dCch38OYbw9qjiThpuIl/yBW0PHw7AH48Bar9Re7Bffur3boNV3R+/fx+ezsy7N3p3PkNu5tdrBUPoCD",
	"ivkoJXi/iFqveVqwEFGHY2Qb9cX+UyLd5bFphFvzkt92DEwwAy/9nKKKi6WnvusrcU/rihqEDnWh1So1",
	"+BJGxt+7GuQTU7m7hbVMeep7Rw8LYSrmojHKLAc7ov4fdsEfagUJKXXP9r12N77fbUrRv7/a+4MizsZP",
	"ZSeyE/b57oKMToU1L+/ud70+YcyO4R/ybB747UDk9v9vhtfCp3ePBvJcGRWU0OqffMqpBLRZgqT7VUgJ",
	"NlDlDUjK8IfFuKXkr12NtOevWYsTlozWJ8G7VW/EcCfXsAKNlqYry1l8wqPTvOR1CLYsitcafWjLV4su",
	"tIWwyhc0Vn2xOqOxKpyifzuSV3U3KDdWpAtPp8/04EG3F/5pNpvRYLlv/w0AAP//OK5ODvwMAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
